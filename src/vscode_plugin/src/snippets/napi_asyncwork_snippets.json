{
  "Napi Async Func": {
    "prefix": "napiasyncwork",
    "body": [
      "struct AsyncData{",
      "    napi_async_work work;",
      "    napi_ref callbackRef;",
      "    // save async work param in.",
      "    // save async work result.",
      "};",
      "static void ExecuteAsyncWork(napi_env env, void* data) {",
      "    std::this_thread::sleep_for(std::chrono::seconds(2));",
      "    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_DOMAIN, \"ASYNC\", \"ExecuteAsyncWork\");",
      "}",
      "static void CompleteAsyncWork(napi_env env, napi_status status, void* data) {",
      "    // Todo: you can use \"napicallfunc\" command that execute the callback.",
      "    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_DOMAIN, \"ASYNC\", \"CompleteAsyncWork\");",
      "}",
      "napi_value StartAsyncWork(napi_env env, napi_callback_info info)",
      "{",
      "    // Create an asynchronous work object.",
      "    napi_create_async_work(env, nullptr, resourceName, ExecuteAsyncWork, CompleteAsyncWork, asyncData, &asyncData->work);",
      "    // Add the asynchronous work object to a queue.",
      "    napi_queue_async_work(env, asyncData->work);",
      "    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_DOMAIN, \"ASYNC\", \"Main thread.\");",
      "    return nullptr;",
      "}"
    ]
  }
}