{
  "Napi Class": {
    "prefix": "napiclass",
    "body": [
      "class HelloWorld {",
      "  public:",
      "   static napi_value Init(napi_env env, napi_value exports);",
      "   static void Destructor(napi_env env, void* nativeObject, void* finalize_hint);",
      "  private:",
      "   explicit HelloWorld();",
      "   ~HelloWorld();",
      "   static napi_value New(napi_env env, napi_callback_info info);",
      "   static napi_value GetValue(napi_env env, napi_callback_info info);",
      "   static napi_value SetValue(napi_env env, napi_callback_info info);",
      "   static napi_value Hello(napi_env env, napi_callback_info info);",
      "   std::string value_;",
      "   napi_env env_;",
      "   napi_ref wrapper_;",
      " };",
      " HelloWorld::HelloWorld(): value_(\"\"), env_(nullptr), wrapper_(nullptr) {}",
      " HelloWorld::~HelloWorld() {}",
      " void HelloWorld::Destructor(napi_env env, void* nativeObject, [[maybe_unused]] void* finalize_hint) { reinterpret_cast<HelloWorld*>(nativeObject)->~HelloWorld(); }",
      " napi_value HelloWorld::New(napi_env env, napi_callback_info info) {",
      "   napi_value newTarget;",
      "   napi_get_new_target(env, info, &newTarget); // Use napi_get_new_target to check if the constructor was invoked with new.",
      "   if (newTarget != nullptr) { // Invoked as the constructor `new HelloWorld()`.",
      "     napi_value jsThis;",
      "     napi_get_cb_info(env, info, nullptr, nullptr, &jsThis, nullptr); // Use napi_get_cb_info to retrieve the callback's context and arguments.",
      "     HelloWorld* obj = new HelloWorld();",
      "     obj->env_ = env;",
      "     // Use napi_wrap to wrap the C++ object obj in the ArkTS object jsThis.",
      "     napi_wrap(env, jsThis, reinterpret_cast<void*>(obj), HelloWorld::Destructor, nullptr, &obj->wrapper_);",
      "     return jsThis;",
      "   } else {",
      "     // Use napi_throw_error to throw an error indicating incorrect constructor invocation.",
      "     napi_throw_error(env, nullptr, \"HelloWorld must be invoked as a constructor with `new`\");",
      "     return nullptr;",
      "   }",
      " }",
      " napi_value HelloWorld::GetValue(napi_env env, napi_callback_info info) {",
      "   napi_value jsThis;",
      "   napi_get_cb_info(env, info, nullptr, nullptr, &jsThis, nullptr); // Use napi_get_cb_info to retrieve the callback's context and arguments.",
      "   HelloWorld* obj;",
      "   // Use napi_unwrap to retrieve obj (the C++ object) previously wrapped in jsThis (the ArkTS object), and perform subsequent operations.",
      "   napi_unwrap(env, jsThis, reinterpret_cast<void**>(&obj));",
      "   napi_value value;",
      "   // Todo: get value from native",
      "   return value;",
      " }",
      " napi_value HelloWorld::SetValue(napi_env env, napi_callback_info info) {",
      "   // Todo: get value from js",
      "   HelloWorld* obj;",
      "   // Use napi_unwrap to retrieve obj (the C++ object) previously wrapped in jsThis (the ArkTS object), and perform subsequent operations.",
      "   napi_unwrap(env, jsThis, reinterpret_cast<void**>(&obj));",
      "   // Todo: set value to native",
      "   return nullptr;",
      " }",
      " napi_value HelloWorld::Hello(napi_env env, napi_callback_info info) {",
      "   napi_value jsThis;",
      "   napi_get_cb_info(env, info, nullptr, nullptr, &jsThis, nullptr); // Use napi_get_cb_info to retrieve the callback's context and arguments.",
      "   HelloWorld* obj;",
      "   // Use napi_unwrap to retrieve obj (the C++ object) previously wrapped in jsThis (the ArkTS object), and perform subsequent operations.",
      "   napi_unwrap(env, jsThis, reinterpret_cast<void**>(&obj));",
      "   napi_value value;",
      "   // Todo: assign a value to obj and return to ArkTs.",
      "   return value;",
      " }",
      " napi_value HelloWorld::Init(napi_env env, napi_value exports) {",
      "   // Use napi_property_descriptor to define properties and methods for a N-API object.",
      "   napi_property_descriptor properties[] = {",
      "       { \"value\", 0, 0, GetValue, SetValue, 0, napi_default, 0 },",
      "       { \"nativeHello\", nullptr, Hello, nullptr, nullptr, nullptr, napi_default, nullptr }",
      "   };",
      "   napi_value cons;",
      "   // Use napi_define_class to define a new JavaScript class backed by a C++ class.",
      "   napi_define_class(env, \"HelloWorld\", NAPI_AUTO_LENGTH, New, nullptr, 2, properties, &cons);",
      "   // Use napi_set_named_property to add a property to the exports object, making the constructor accessible in ArkTs.",
      "   napi_set_named_property(env, exports, \"HelloWorld\", cons);",
      "   return exports;",
      " }"
    ]
  }
}