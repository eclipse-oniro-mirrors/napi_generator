{
  "Napi Class": {
    "prefix": "napiclass",
    "body": [
      "class HelloWorld {",
      "  public:",
      "   static napi_value Init(napi_env env, napi_value exports);",
      "   static void Destructor(napi_env env, void* nativeObject, void* finalize_hint);",
      " ",
      "  private:",
      "   explicit HelloWorld(std::string value_ = \"\");",
      "   ~HelloWorld();",
      " ",
      "   static napi_value New(napi_env env, napi_callback_info info);",
      "   static napi_value GetValue(napi_env env, napi_callback_info info);",
      "   static napi_value SetValue(napi_env env, napi_callback_info info);",
      "   static napi_value Hello(napi_env env, napi_callback_info info);",
      " ",
      "   std::string value_;",
      "   napi_env env_;",
      "   napi_ref wrapper_;",
      " };",
      " ",
      "static thread_local napi_ref g_ref = nullptr;",
      "",
      "HelloWorld::HelloWorld(std::string value)",
      "    : value_(value), env_(nullptr), wrapper_(nullptr) {}",
      "",
      "HelloWorld::~HelloWorld()",
      "{",
      "  napi_delete_reference(env_, wrapper_);",
      "}",
      "",
      "void HelloWorld::Destructor(napi_env env,",
      "                          void* nativeObject,",
      "                          [[maybe_unused]] void* finalize_hint)",
      "{",
      "  OH_LOG_INFO(LOG_APP, \"HelloWorld::Destructor called\");",
      "  reinterpret_cast<HelloWorld*>(nativeObject)->~HelloWorld();",
      "}",
      "",
      "napi_value HelloWorld::New(napi_env env, napi_callback_info info)",
      "{",
      "  OH_LOG_INFO(LOG_APP, \"HelloWorld::New called\");",
      "",
      "  napi_value newTarget;",
      "  napi_get_new_target(env, info, &newTarget);",
      "  if (newTarget != nullptr) {",
      "    // Invoked as the constructor `new HelloWorld(...)`.",
      "    size_t argc = 1;",
      "    napi_value args[1];",
      "    napi_value jsThis;",
      "    napi_get_cb_info(env, info, &argc, args, &jsThis, nullptr);",
      "",
      "    std::string value = \"\";",
      "    size_t strLength = 0;",
      "    napi_status status = napi_get_value_string_utf8(env, args[0], NULL, 0, &strLength);",
      "    if (status != napi_ok) {",
      "        return nullptr;",
      "    }",
      "    char *strValue = new char[strLength + 1];",
      "    status = napi_get_value_string_utf8(env, args[0], strValue, strLength + 1, &strLength);",
      "    if (status != napi_ok) {",
      "        delete[] strValue;",
      "        return nullptr;",
      "    }",
      "    value = strValue;",
      "    delete[] strValue;",
      "",
      "    HelloWorld* obj = new HelloWorld(value);",
      "",
      "    obj->env_ = env;",
      "    // Use napi_wrap to wrap the C++ object obj in the ArkTS object jsThis.",
      "    napi_wrap(env,",
      "              jsThis,",
      "              reinterpret_cast<void*>(obj),",
      "              HelloWorld::Destructor,",
      "              nullptr,  // finalize_hint",
      "              &obj->wrapper_);",
      "",
      "    return jsThis;",
      "  } else {",
      "    // Invoked as the plain function `Hello(...)`.",
      "    size_t argc = 1;",
      "    napi_value args[1];",
      "    napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);",
      "",
      "    napi_value cons;",
      "    napi_get_reference_value(env, g_ref, &cons);",
      "    napi_value instance;",
      "    napi_new_instance(env, cons, argc, args, &instance);",
      "",
      "    return instance;",
      "  }",
      "}",
      "",
      "napi_value HelloWorld::GetValue(napi_env env, napi_callback_info info)",
      "{",
      "  OH_LOG_INFO(LOG_APP, \"HelloWorld::GetValue called\");",
      "",
      "  napi_value jsThis;",
      "  napi_get_cb_info(env, info, nullptr, nullptr, &jsThis, nullptr);",
      "",
      "  HelloWorld* obj;",
      "  // Use napi_unwrap to retrieve obj (the C++ object) previously wrapped in jsThis (the ArkTS object), and perform subsequent operations.",
      "  napi_unwrap(env, jsThis, reinterpret_cast<void**>(&obj));",
      "  napi_value str;",
      "  napi_status status = napi_create_string_utf8(env, obj->value_.c_str(), NAPI_AUTO_LENGTH, &str);",
      "  if (status != napi_ok) {",
      "        napi_throw_error(env, NULL, \"Failed to create result value\");",
      "        return NULL;",
      "  }",
      "  return str;",
      "}",
      "",
      "napi_value HelloWorld::SetValue(napi_env env, napi_callback_info info)",
      "{",
      "  OH_LOG_INFO(LOG_APP, \"HelloWorld::SetValue called\");",
      "",
      "  size_t argc = 1;",
      "  napi_value value;",
      "  napi_value jsThis;",
      "",
      "  napi_get_cb_info(env, info, &argc, &value, &jsThis, nullptr);",
      "",
      "  HelloWorld* obj;",
      "  // Use napi_unwrap to retrieve obj (the C++ object) previously wrapped in jsThis (the ArkTS object), and perform subsequent operations.",
      "  napi_unwrap(env, jsThis, reinterpret_cast<void**>(&obj));",
      "  size_t strLength = 0;",
      "  napi_status status = napi_get_value_string_utf8(env, value, NULL, 0, &strLength);",
      "  if (status != napi_ok) {",
      "  return nullptr;",
      "  }",
      "  char *strValue = new char[strLength + 1];",
      "  status = napi_get_value_string_utf8(env, value, strValue, strLength + 1, &strLength);",
      "  if (status != napi_ok) {",
      "  delete[] strValue;",
      "  return nullptr;",
      "  }",
      "  obj->value_ = strValue;",
      "  delete[] strValue;",
      "",
      "  return nullptr;",
      "}",
      "",
      "napi_value HelloWorld::Hello(napi_env env, napi_callback_info info)",
      "{",
      "  OH_LOG_INFO(LOG_APP, \"HelloWorld::Hello called\");",
      "",
      "  napi_value jsThis;",
      "  napi_get_cb_info(env, info, nullptr, nullptr, &jsThis, nullptr);",
      "",
      "  HelloWorld* obj;",
      "  // Use napi_unwrap to retrieve obj (the C++ object) previously wrapped in jsThis (the ArkTS object), and perform subsequent operations.",
      "  napi_unwrap(env, jsThis, reinterpret_cast<void**>(&obj));",
      "  obj->value_ = \"native: hello world to js!\";",
      "  napi_value str;",
      "  napi_status status = napi_create_string_utf8(env, obj->value_.c_str(), NAPI_AUTO_LENGTH, &str);",
      "  if (status != napi_ok) {",
      "        napi_throw_error(env, NULL, \"Failed to create result value\");",
      "        return NULL;",
      "  }",
      "  return str;",
      "}",
      "",
      "napi_value HelloWorld::Init(napi_env env, napi_value exports)",
      "{",
      "  napi_property_descriptor properties[] = {",
      "      { \"value\", 0, 0, GetValue, SetValue, 0, napi_default, 0 },",
      "      { \"nativeHello\", nullptr, Hello, nullptr, nullptr, nullptr, napi_default, nullptr }",
      "  };",
      "",
      "  napi_value cons;",
      "  napi_define_class(env, \"HelloWorld\", NAPI_AUTO_LENGTH, New, nullptr, 2,",
      "                           properties, &cons);",
      "",
      "  napi_create_reference(env, cons, 1, &g_ref);",
      "  napi_set_named_property(env, exports, \"HelloWorld\", cons);",
      "  return exports;",
      "}",
      "",
      "EXTERN_C_START",
      "static napi_value Init(napi_env env, napi_value exports)",
      "{",
      "    HelloWorld::Init(env, exports);",
      "    return exports;",
      "}",
      "EXTERN_C_END"
    ]
  }
}