{
  "Napi Class": {
    "prefix": "napiclass",
    "body": [
    "class HelloWorld {",
    "  public:",
    "   static napi_value Init(napi_env env, napi_value exports);",
    "   static void Destructor(napi_env env, void* nativeObject, void* finalize_hint);",
    "  private:",
    "   explicit HelloWorld();",
    "   ~HelloWorld();",
    "   static napi_value New(napi_env env, napi_callback_info info);",
    "   static napi_value GetValue(napi_env env, napi_callback_info info);",
    "   static napi_value SetValue(napi_env env, napi_callback_info info);",
    "   static napi_value Hello(napi_env env, napi_callback_info info);",
    "   std::string value_;",
    "   napi_env env_;",
    "   napi_ref wrapper_;",
    "};",
    "HelloWorld::HelloWorld(): value_(\"\"), env_(nullptr), wrapper_(nullptr) {}",
    "HelloWorld::~HelloWorld() {}",
    "void HelloWorld::Destructor(napi_env env, void* nativeObject, [[maybe_unused]] void* finalize_hint)",
    "{",
    "  reinterpret_cast<HelloWorld*>(nativeObject)->~HelloWorld();",
    "}",
    "napi_value HelloWorld::New(napi_env env, napi_callback_info info)",
    "{",
    "  napi_value newTarget;",
    "  // Check if the constructor was invoked with new.",
    "  napi_get_new_target(env, info, &newTarget);",
    "  if (newTarget != nullptr) {",
    "    // Invoked as the constructor `new HelloWorld()`.",
    "    napi_value jsThis;",
    "    // Retrieve the callback's context and arguments.",
    "    napi_get_cb_info(env, info, nullptr, nullptr, &jsThis, nullptr);",
    "    HelloWorld* obj = new HelloWorld();",
    "    obj->env_ = env;",
    "    // Wrap the C++ object obj in the ArkTS object jsThis.",
    "    napi_wrap(env, jsThis, reinterpret_cast<void*>(obj), HelloWorld::Destructor, nullptr, &obj->wrapper_);",
    "    return jsThis;",
    "  } else {",
    "    OH_LOG_ERROR(LOG_APP, \"HelloWorld must be invoked as a constructor with `new`\");",
    "    return nullptr;",
    "  }",
    "}",
    "napi_value HelloWorld::GetValue(napi_env env, napi_callback_info info)",
    "{",
    "  // Todo: you can use \"napigetinfo\" command to get snippets that get js context and arguments.",
    "  HelloWorld* obj;",
    "  // Retrieve obj (the C++ object) previously wrapped in jsThis (the ArkTS object), and perform subsequent operations.",
    "  napi_unwrap(env, jsThis, reinterpret_cast<void**>(&obj));",
    "  // Todo: you can use \"napireturn_\" to choose command that return value to js.",
    "}",
    "napi_value HelloWorld::SetValue(napi_env env, napi_callback_info info)",
    "{",
    "  // Todo: you can use \"napigetinfo\" command to get snippets that get js context and arguments.",
    "  HelloWorld* obj;",
    "  napi_unwrap(env, jsThis, reinterpret_cast<void**>(&obj));",
    "  // Todo: you can use \"napigetparam_\" to choose command that get params from js.",
    "  return nullptr;",
    "}",
    "napi_value HelloWorld::Hello(napi_env env, napi_callback_info info)",
    "{",
    "  OH_LOG_INFO(LOG_APP, \"HelloWorld::Hello World!\");",
    "  return nullptr;",
    "}",
    "napi_value HelloWorld::Init(napi_env env, napi_value exports)",
    "{",
    "  // Define properties and methods for a N-API object",
    "  napi_property_descriptor properties[] = {",
    "      { \"value\", 0, 0, GetValue, SetValue, 0, napi_default, 0 },",
    "      { \"hello\", nullptr, Hello, nullptr, nullptr, nullptr, napi_default, nullptr }",
    "  };",
    "  napi_value cons;",
    "  // Define a js class",
    "  napi_define_class(env, \"HelloWorld\", NAPI_AUTO_LENGTH, New, nullptr, 2, properties, &cons);",
    "  // Set the 'HelloWorld' class on the exports object.",
    "  napi_set_named_property(env, exports, \"HelloWorld\", cons);",
    "  return exports;",
    "}"
    ]
  }
}