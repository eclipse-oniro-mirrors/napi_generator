{
  "Napi Class": {
    "prefix": "napiclass",
    "body": [
      "class testNapiWrap {",
      "  public:",
      "      static napi_value Init(napi_env env, napi_value exports);",
      "      static void Destructor(napi_env env, void *nativeObject, void *finalizeHint);",
      "  ",
      "  private:",
      "      explicit testNapiWrap(napi_value value_ = 0);",
      "      ~testNapiWrap();",
      "  ",
      "      static napi_value New(napi_env env, napi_callback_info info);",
      "      static napi_value Tyof(napi_env env, napi_callback_info info);",
      "  ",
      "      napi_value value_;",
      "      napi_env env_;",
      "      napi_ref wrapper_;",
      "  };",
      "  ",
      "static thread_local napi_ref g_ref = nullptr;",
      "  ",
      "testNapiWrap::testNapiWrap(napi_value value) : value_(value), env_(nullptr), wrapper_(nullptr) {}",
      "  ",
      "testNapiWrap::~testNapiWrap() { napi_delete_reference(env_, wrapper_); }",
      "  ",
      "void testNapiWrap::Destructor(napi_env env, void *nativeObject, [[maybe_unused]] void *finalizeHint)",
      "{",
      "    reinterpret_cast<testNapiWrap *>(nativeObject)->~testNapiWrap();",
      "}",
      "  ",
      "napi_status napiValueType2Str(const napi_env &env, const napi_valuetype type, napi_value *result)",
      "{",
      "    const char *typeStr = \"\";",
      "    napi_status status;",
      "    // napi_valuetype -> const char *",
      "    switch (type) {",
      "        case napi_undefined:",
      "            typeStr = \"undefined\";",
      "            break;",
      "        case napi_null:",
      "            typeStr = \"null\";",
      "            break;",
      "        case napi_boolean:",
      "            typeStr = \"boolean\";",
      "            break;",
      "        case napi_number:",
      "            typeStr = \"number\";",
      "            break;",
      "        case napi_string:",
      "            typeStr = \"string\";",
      "            break;",
      "        case napi_symbol:",
      "            typeStr = \"symbol\";",
      "            break;",
      "        case napi_object:",
      "            typeStr = \"object\";",
      "            break;",
      "        case napi_function:",
      "            typeStr = \"function\";",
      "            break;",
      "        case napi_external:",
      "            typeStr = \"external\";",
      "            break;",
      "        case napi_bigint:",
      "            typeStr = \"bigint\";",
      "            break;",
      "        default:",
      "            typeStr = \"unknown\";",
      "            break;",
      "    }",
      "    // const char * -> napi_value",
      "    status = napi_create_string_utf8(env, typeStr, NAPI_AUTO_LENGTH, result);",
      "    return status;",
      "}",
      "",
      "napi_value testNapiWrap::Tyof(napi_env env, napi_callback_info info)",
      "{",
      "    napi_value jsThis;",
      "    napi_valuetype result;",
      "    napi_value resultStr;",
      "    napi_status status;",
      "    size_t argc = 1;",
      "    napi_value argv[1];",
      "    status = napi_get_cb_info(env, info, &argc, argv, &jsThis, nullptr);",
      "    if (status != napi_ok) {",
      "        std::string errMsg = \"napi_get_cb_info failed: \" + std::to_string(status);",
      "        napi_throw_error(env, NULL, errMsg.c_str());",
      "        return NULL;",
      "    }",
      "    testNapiWrap *obj;",
      "    status = napi_unwrap(env, jsThis, reinterpret_cast<void **>(&obj));",
      "    if (status != napi_ok || obj == nullptr) {",
      "        std::string errMsg = \"napi_unwrap failed: \" + std::to_string(status);",
      "        napi_throw_error(env, NULL, errMsg.c_str());",
      "        return NULL;",
      "    }",
      "    status = napi_typeof(env, argv[0], &result);",
      "    if (status != napi_ok) {",
      "        std::string errMsg = \"napi_typeof failed: \" + std::to_string(status);",
      "        napi_throw_error(env, NULL, errMsg.c_str());",
      "        return NULL;",
      "    }",
      "    status = napiValueType2Str(env, result, &resultStr);",
      "    if (status != napi_ok) {",
      "        std::string errMsg = \"convert napi_valuetype failed: \" + std::to_string(status);",
      "        napi_throw_error(env, NULL, errMsg.c_str());",
      "        return NULL;",
      "    }",
      "    return resultStr;",
      "}",
      "",
      "napi_value testNapiWrap::New(napi_env env, napi_callback_info info)",
      "{",
      "    napi_value newTarget;",
      "    napi_get_new_target(env, info, &newTarget);",
      "    if (newTarget != nullptr) {",
      "        size_t argc = 1;",
      "        napi_value args[1];",
      "        napi_value jsThis;",
      "        napi_get_cb_info(env, info, &argc, args, &jsThis, nullptr);",
      "        napi_value value;",
      "        testNapiWrap *obj = new testNapiWrap(value);",
      "        obj->env_ = env;",
      "        napi_wrap(env, jsThis, reinterpret_cast<void *>(obj), testNapiWrap::Destructor,",
      "                  nullptr, // finalize_hint",
      "                  &obj->wrapper_);",
      "        return jsThis;",
      "    } else {",
      "        size_t argc = 1;",
      "        napi_value args[1];",
      "        napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);",
      "        napi_value cons;",
      "        napi_get_reference_value(env, g_ref, &cons);",
      "        napi_value instance;",
      "        napi_new_instance(env, cons, argc, args, &instance);",
      "        return instance;",
      "    }",
      "}",
      "",
      "EXTERN_C_START",
      "napi_value testNapiWrap::Init(napi_env env, napi_value exports)",
      "{",
      "    napi_property_descriptor properties[] = {{\"Tyof\", nullptr, Tyof, nullptr, nullptr, nullptr, napi_default, nullptr}};",
      "    napi_value cons;",
      "    napi_define_class(env, \"testNapiWrapClass\", NAPI_AUTO_LENGTH, New, nullptr, 1, properties, &cons);",
      "    napi_create_reference(env, cons, 1, &g_ref);",
      "    napi_set_named_property(env, exports, \"testNapiWrap\", cons);",
      "    return exports;",
      "}",
      "",
      "static napi_value Init(napi_env env, napi_value exports)",
      "{",
      "    testNapiWrap::Init(env, exports);",
      "    return exports;",
      "}",
      "EXTERN_C_END"
    ],
    "description": ""
  }
}