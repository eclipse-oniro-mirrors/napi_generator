{
  "Napi Async Func": {
    "prefix": "napiasyncfunc",
    "body": [
      "struct AsyncData{",
      "    napi_async_work work;",
      "    napi_ref callbackRef;",
      "    // save async work param in.",
      "    // save async work result.",
      "};",
      "static void ExecuteAsyncWork(napi_env env, void* data) {",
      "    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_DOMAIN, \"ASYNC\", \"ExecuteAsyncWork\");",
      "}",
      "static void CompleteAsyncWork(napi_env env, napi_status status, void* data) {",
      "    AsyncData* asyncData = static_cast<AsyncData*>(data);",
      "    napi_value callback = nullptr;",
      "    // Retrieve the js value associated with a reference.",
      "    napi_get_reference_value(env, asyncData->callbackRef, &callback);",
      "    // Todo: execute the callback: napi_call_function(env, nullptr, callback, 1, callbackArg, &result);",
      "    // Delete the napi_ref object and asynchronous work object.",
      "    napi_delete_reference(env, asyncData->callbackRef);",
      "    napi_delete_async_work(env, asyncData->work);",
      "    delete asyncData;",
      "    OH_LOG_Print(LOG_APP, LOG_INFO, LOG_DOMAIN, \"ASYNC\", \"CompleteAsyncWork\");",
      "}",
      "napi_value StartAsyncWork(napi_env env, napi_callback_info info)",
      "{",
      "    AsyncData* asyncData = new AsyncData();",
      "    napi_value callback = nullptr;",
      "    // Convert the callback to napi_ref to extend its lifecycle to prevent it from being garbage-collected.",
      "    napi_create_reference(env, callback, 1, &asyncData->callbackRef);",
      "    napi_value resourceName = nullptr;",
      "    // Create a js string which is used as the name for the asynchronous work object being created.",
      "    napi_create_string_utf8(env, \"asyncWork\", NAPI_AUTO_LENGTH, &resourceName);",
      "    // Create an asynchronous work object.",
      "    napi_create_async_work(env, nullptr, resourceName, ExecuteAsyncWork, CompleteAsyncWork, asyncData, &asyncData->work);",
      "    // Add the asynchronous work object to a queue.",
      "    napi_queue_async_work(env, asyncData->work);",
      "    return nullptr;",
      "}",
      "EXTERN_C_START",
      "// Initialize the module.",
      "static napi_value Init(napi_env env, napi_value exports)",
      "{",
      "    // Define properties and methods for a N-API object.",
      "    napi_property_descriptor desc[] = {",
      "       { \"startAsyncWork\", nullptr, StartAsyncWork, nullptr, nullptr, nullptr, napi_default, nullptr },",
      "    };",
      "    // Add an array of properties to a ArkTs object.",
      "    napi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);",
      "    return exports;",
      "}",
      "EXTERN_C_END"
    ]
  }
}