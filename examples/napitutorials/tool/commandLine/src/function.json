{
  "directFunction": {
    "indexTemplete": "export const %s:(%s) => %s;\n",
    "cppFuncTemplete": "#include \"napi/native_api.h\"\n[include_replace]\n\n[body_replace]\n\nEXTERN_C_START\nstatic napi_value Init(napi_env env, napi_value exports)\n{\n    napi_property_descriptor desc[] = {\n         [init_replace]\n};\nnapi_define_properties(env, exports, sizeof(desc) / sizeof(desc[0]), desc);\nreturn exports;\n}\nEXTERN_C_END\n\nstatic napi_module demoModule = {\n    .nm_version = 1,\n    .nm_flags = 0,\n    .nm_filename = nullptr,\n    .nm_register_func = Init,\n    .nm_modname = \"entry\",\n    .nm_priv = ((void*)0),\n    .reserved = { 0 },\n};\n\nextern \"C\" __attribute__((constructor)) void RegisterEntryModule(void)\n{\n    napi_module_register(&demoModule);\n}",
    "cppFuncDetails": {
      "funcInitTemplete": "{ \"%s\" , nullptr, %s, nullptr, nullptr, nullptr, napi_default, nullptr },",
      "funcBodyTemplete": "static napi_value [funcName](napi_env env, napi_callback_info info)\n{\n[func_getParam_replace]\n    [func_return_replace]\n }\n",
      "funcGetParamTemplete" : "size_t requireArgc = [param_length];\n   size_t argc = [param_length];\n   napi_value args[[param_length]] = {nullptr};\n   napi_get_cb_info(env, info, &argc, args , nullptr, nullptr);\n   [getParam_replace]\n   ",
      "funcReturnTemplete" : "[return_type_define]\n   // Todo\n   // eg. res = value0 + value1;\n   napi_value result;\n   [return_replace]\n   return result;\n",
      "paramGenTemplete": " napi_valuetype valuetype%s;\n   napi_typeof(env, args[%s], &valuetype%s);\n   %s value%s;\n   [getParam_replace]",
      "funcParamType": {
        "int32_t": "napi_get_value_int32(env, args[%s], &value%s);\n",
        "int64_t": "napi_get_value_int64(env, args[%s], &value%s);\n",
        "uint32_t": "napi_get_value_uint32(env, args[%s], &value%s);\n",
        "int": "",
        "double": "napi_get_value_double(env, args[%s], &value%s);\n",
        "bool": "napi_get_value_bool(env, args[%s], &value%s);\n",
        "string": "char buf[1024];\n    size_t results;\n    napi_get_value_string_utf8(env, args[%s], buf, 1024, &results);\n    value%s = buf;\n"
      },
      "funcReturnType": {
        "int32_t": "napi_create_int32(env, res, &result);\n",
        "int64_t": "napi_create_int64(env, res, &result);\n",
        "uint32_t": "napi_create_uint32(env, res, &result);\n",
        "int": "",
        "size_t": "",
        "double": "napi_create_double(env, res, &result);\n",
        "bool": "napi_get_boolean(env, res, &result);\n",
        "string": "napi_create_string_utf8(env, res, NAPI_AUTO_LENGTH, &result);\n"
      }
    },
    "abilityTestTemplete": "it('assertContain_[random_number]', 0, () => {\n      // Defines a test case. This API supports three parameters: test case name, filter parameter, and test case function.\n      hilog.info(0x0000, 'testTag', '%{public}s', 'it begin');\n\n      [func_direct_testCase]\n\n      // Defines a variety of assertion methods, which are used to declare expected boolean conditions.\n      // 断言 如：expect(result).assertEqual(2+3)\n    })\n"
  },
  "asyncFunction": {
  }
}